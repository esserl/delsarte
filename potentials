// The function matrix_potentials below takes in the degree and weights of a hypersurface in a well-formed weighted projective space
// and returns a list of the possible quasismooth Delsarte equations for such a hypersurface.  The input must be in the form of
// matrix_potentials([d,a_0,...,a_n]) where d is the degree and a_0,...,a_n the weights.  The program should only be used in the 
// case that the degree d is greater than the sum of any two weights.

function valid_graph(num, edgeset, roots); // input is number of vertices, set of ordered pairs of directed edges
					// and distinguished vertices called roots
    valid := true;
    for i := 1 to num do
	if #[j: j in edgeset | j[1] eq i] gt 1 or #[j: j in edgeset | j[2] eq i] gt 1 then
		// A valid graph can have no more than one directed edge pointing to a given vertex or from a given vertex
	    valid := false;
	    break;
	end if;
	if #[j: j in edgeset | j[1] eq i] eq 0 and i in roots eq false then
		// Any vertex of a valid graph with no edge pointing out of it must be a root
	    valid := false;
	    break;
	end if;
    end for;
    if valid eq true then
	return true;
    else
	return false;
    end if;
end function;

function matrix_potentials(wphs);
    deg := wphs[1];
    num_weights := #wphs - 1; // This gives the number of weights (dimension of hypersurf + 2)
    alledges := {}; // This is a set where we'll store edges in the graph corresponding to f
    roots := [];
    for i := 1 to num_weights do
	weight := wphs[i+1];
	if deg mod weight eq 0 then
	    Append(~roots,i); // The weights which divide the degree are the possible "roots" of valid graphs
	end if;
	set := [1 .. num_weights];
	Exclude(~set,i);
	for j in set do // This searches other weights so that d-a_j is divisible by weight
	    if (deg - wphs[j+1]) mod weight eq 0 then
		Include(~alledges, [i,j]); // A valid edge is i -> j where X_i^a X_j is a monomial of degree d
	    end if;
	end for;
    end for;
    matrix_list := [];
    P := {{}};
    for i := 1 to num_weights do //At most n edges are present in a valid graph (one pointing out of each vertex)
	P := P join Subsets(alledges,i);
    end for;
    for edgeset in P do //We'll test possible edge sets for valid potentials
	if valid_graph(num_weights,edgeset, roots) eq true then
	    matrix := [[]: i in [1 .. num_weights]];
	    usedroots := [i: i in [1 .. num_weights] | #[j: j in edgeset | j[1] eq i] eq 0];
	    for i in usedroots do
		monomial := [0: j in [1 .. num_weights]];
	    	monomial[i] := deg / wphs[i+1];
		matrix[i] := monomial;
	    end for;
	    for edge in edgeset do
		monomial := [0: j in [1 .. num_weights]];
		monomial[edge[1]] := (deg - wphs[edge[2]+1]) / wphs[edge[1] +1];
		monomial[edge[2]] := 1;
		matrix[edge[1]] := monomial;
	    end for;
	    Append(~matrix_list, matrix);
	end if;
    end for;
    return [Matrix(RationalField(), num_weights, num_weights, potential): potential in matrix_list];
end function;
