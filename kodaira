//////////////////////////////////////////////////////////////////////
// kodaira.m
//
// Goal: calculate the Kodaira dimension of a general member of a 
// well-formed klt hypersurface in weighted projective space
// which is the general member of a linear system of monomials (or
// more generally Newton non-degenerate)
//////////////////////////////////////////////////////////////////////

//Note: can use the command Resolution(ResolveLinearSystem(Xdiv));, which I think
//automatically handles finding the Groebner fan, but it's very slow.
//Going to change it to just resolving P for now: this will still work for quasismooth ones (I think)

Q := Rationals();

//This version only works for quasismooth hypersurfaces!!!

function Kodaira(weights,degree,A)
T := Cputime();
bP := ProjectiveSpace(Q,weights);
K := CanonicalDivisor(bP);
monomialvals := [];
for i in Rows(A) do
    Append(~monomialvals,Divisor(bP,ElementToSequence(i)));
end for;
P := Polytope(Rays(Fan(bP)));
ineq := [<p,(-degree/&+weights)*(K*p) - Min([D*p:D in monomialvals]) - 1>: p in Points(P) | p ne Zero(Ambient(P))];
AdjPolytope := &meet[HalfspaceToPolyhedron(H[1],-H[2]):H in ineq];
return Minimum(#weights-2,Dimension(AdjPolytope)); //Kodaira dimension of hypersurface
end function;

//Example Implementation

weights := [5,1,1,1]; //weights of the well-formed weighted projective space
degree := 10;
A := Matrix(Q,4,4,[2,0,0,0, 0,10,0,0, 0,0,10,0, 0,0,0,10]); //equation for the hypersurface; each
							// row of the matrix is a monomial

Kodaira(weights,degree,A);
